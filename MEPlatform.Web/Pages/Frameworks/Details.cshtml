@page "{id:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@model MEPlatform.Web.Pages.Frameworks.DetailsModel
@{
    ViewData["Title"] = $"Framework - {Model.Framework?.Name}";
}

@if (Model.Framework != null)
{
    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Page("./Index")">Frameworks</a></li>
                    <li class="breadcrumb-item active">@Model.Framework.Name</li>
                </ol>
            </nav>
            <h1 class="h3"><i class="bi bi-diagram-3 me-2"></i>@Model.Framework.Name</h1>
        </div>
        <div>
            @if (User.IsInRole("SuperAdministrator") || User.IsInRole("Supervisor"))
            {
                <div class="btn-group">
                    <a href="@Url.Page("./Edit", new { id = Model.Framework.Id })" class="btn btn-outline-primary">
                        <i class="bi bi-pencil"></i> Edit Framework
                    </a>
                    <button type="button" class="btn btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown">
                        <span class="visually-hidden">Toggle Dropdown</span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="@Url.Page("./Elements/Index", new { frameworkId = Model.Framework.Id })">
                            <i class="bi bi-list-nested"></i> Manage Elements
                        </a></li>
                        <li><a class="dropdown-item" href="@Url.Page("./Indicators/Index", new { frameworkId = Model.Framework.Id })">
                            <i class="bi bi-graph-up"></i> Manage Indicators
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="#" onclick="confirmDelete(@Model.Framework.Id)">
                            <i class="bi bi-trash"></i> Delete Framework
                        </a></li>
                    </ul>
                </div>
            }
        </div>
    </div>

    <!-- Framework Overview -->
    <div class="row mb-4">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h5>Overview</h5>
                            <p class="text-muted mb-0">@Model.Framework.Description</p>
                        </div>
                        <span class="badge @(Model.Framework.IsActive ? "bg-success" : "bg-secondary") fs-6">
                            @(Model.Framework.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Framework Type</h6>
                            <span class="badge bg-primary mb-3">@Model.Framework.Type</span>
                            
                            <h6>Created</h6>
                            <p class="mb-3">@Model.Framework.CreatedAt.ToString("MMMM dd, yyyy")</p>
                        </div>
                        <div class="col-md-6">
                            @if (Model.Framework.OverallProgress.HasValue)
                            {
                                <h6>Overall Progress</h6>
                                <div class="progress mb-2" style="height: 20px;">
                                    <div class="progress-bar @(Model.Framework.OverallProgress.Value >= 75 ? "bg-success" : Model.Framework.OverallProgress.Value >= 50 ? "bg-warning" : "bg-danger")" 
                                         role="progressbar" 
                                         style="width: @Model.Framework.OverallProgress.Value%">
                                        @Model.Framework.OverallProgress.Value.ToString("F1")%
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="card">
                <div class="card-body">
                    <h6>Key Statistics</h6>
                    <div class="row text-center">
                        <div class="col-6 mb-3">
                            <h4 class="text-primary">@Model.Framework.ElementsCount</h4>
                            <small class="text-muted">Elements</small>
                        </div>
                        <div class="col-6 mb-3">
                            <h4 class="text-success">@Model.Framework.IndicatorsCount</h4>
                            <small class="text-muted">Indicators</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-info">@Model.Framework.ProjectsCount</h4>
                            <small class="text-muted">Projects</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-warning">@Model.Framework.MeasurementsCount</h4>
                            <small class="text-muted">Measurements</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Framework Elements Hierarchy -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Framework Structure</h5>
                    @if (User.IsInRole("SuperAdministrator") || User.IsInRole("Supervisor"))
                    {
                        <a href="@Url.Page("./Elements/Create", new { frameworkId = Model.Framework.Id })" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-plus"></i> Add Element
                        </a>
                    }
                </div>
                <div class="card-body">
                    @if (Model.Framework.Elements.Any())
                    {
                        <div id="frameworkTree">
                            @foreach (var element in Model.Framework.Elements.Where(e => e.ParentId == null))
                            {
                                @await Html.PartialAsync("_FrameworkElementNode", element, new ViewDataDictionary(ViewData) { { "AllElements", Model.Framework.Elements } })
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-diagram-3" style="font-size: 3rem; color: #ccc;"></i>
                            <p class="mt-2 text-muted">No framework elements defined yet.</p>
                            @if (User.IsInRole("SuperAdministrator") || User.IsInRole("Supervisor"))
                            {
                                <a href="@Url.Page("./Elements/Create", new { frameworkId = Model.Framework.Id })" class="btn btn-primary">
                                    <i class="bi bi-plus"></i> Add First Element
                                </a>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Analytics -->
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Progress Over Time</h6>
                </div>
                <div class="card-body">
                    <canvas id="progressChart" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Project Status Distribution</h6>
                </div>
                <div class="card-body">
                    <canvas id="statusChart" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center py-5">
        <i class="bi bi-exclamation-triangle text-danger" style="font-size: 4rem;"></i>
        <h4 class="mt-3">Framework Not Found</h4>
        <p class="text-muted">The requested framework could not be found.</p>
        <a href="@Url.Page("./Index")" class="btn btn-primary">
            <i class="bi bi-arrow-left"></i> Back to Frameworks
        </a>
    </div>
}

@section Scripts {
    @if (Model.Framework != null)
    {
        <script>
            // Progress Over Time Chart
            const progressCtx = document.getElementById('progressChart').getContext('2d');
            new Chart(progressCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Progress (%)',
                        data: @Html.Raw(Json.Serialize(GenerateProgressData(Model.Framework.OverallProgress ?? 0))),
                        borderColor: '#0d6efd',
                        backgroundColor: 'rgba(13, 110, 253, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    }
                }
            });

            // Project Status Chart
            const statusCtx = document.getElementById('statusChart').getContext('2d');
            new Chart(statusCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Active', 'Completed', 'On Hold', 'Planning'],
                    datasets: [{
                        data: [12, 5, 2, 3],
                        backgroundColor: ['#198754', '#0d6efd', '#ffc107', '#6c757d']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            // Delete confirmation
            function confirmDelete(frameworkId) {
                if (confirm('Are you sure you want to delete this framework? This action cannot be undone and will affect all related projects and data.')) {
                    // Implement delete functionality
                    window.location.href = '@Url.Page("./Delete")/' + frameworkId;
                }
            }
        </script>
    }
}

@functions {
    private List<decimal> GenerateProgressData(decimal currentProgress)
    {
        var random = new Random();
        var data = new List<decimal>();
        var start = Math.Max(0, currentProgress - 30);
        
        for (int i = 0; i < 6; i++)
        {
            var progress = start + (currentProgress - start) * (i + 1) / 6;
            progress += (decimal)(random.NextDouble() * 10 - 5); // Add some variation
            data.Add(Math.Max(0, Math.Min(100, progress)));
        }
        
        data[data.Count - 1] = currentProgress; // Ensure last value is current progress
        return data;
    }
}