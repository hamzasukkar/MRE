@page
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@model MEPlatform.Web.Pages.Frameworks.Indicators.IndexModel
@{
    ViewData["Title"] = $"Indicators - {Model.Element?.Name}";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-2">
                            <li class="breadcrumb-item"><a href="@Url.Page("/Dashboard/Index")">Dashboard</a></li>
                            <li class="breadcrumb-item"><a href="@Url.Page("../Index")">Frameworks</a></li>
                            <li class="breadcrumb-item"><a href="@Url.Page("../Elements/Index", new { frameworkId = Model.Element?.FrameworkId })">@Model.Framework?.Name</a></li>
                            <li class="breadcrumb-item active">Indicators</li>
                        </ol>
                    </nav>
                    <h1 class="h3 mb-0">
                        <i class="bi bi-speedometer2 me-2"></i>Indicators for @Model.Element?.Name
                    </h1>
                    <p class="text-muted">@Model.Element?.Type indicators for performance measurement</p>
                </div>
                <div class="d-flex gap-2">
                    @if (User.IsInRole("SuperAdministrator") || User.IsInRole("Supervisor"))
                    {
                        <a href="@Url.Page("./Create", new { elementId = Model.ElementId })" class="btn btn-warning">
                            <i class="bi bi-plus-circle me-1"></i>Add Indicator
                        </a>
                    }
                    <a href="@Url.Page("../Elements/Index", new { frameworkId = Model.Element?.FrameworkId })" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Framework
                    </a>
                </div>
            </div>

            <!-- Element Context Card -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card border-@(GetElementColorClass(Model.Element?.Type)) shadow-sm">
                        <div class="card-header bg-@(GetElementColorClass(Model.Element?.Type)) text-white">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-@(Model.Element?.Icon ?? GetDefaultIcon(Model.Element?.Type)) me-3" style="font-size: 1.5rem;"></i>
                                <div>
                                    <h5 class="mb-0">@Model.Element?.Name</h5>
                                    <small class="opacity-75">@Model.Element?.Type in @Model.Framework?.Name</small>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-8">
                                    <p class="mb-0">@Model.Element?.Description</p>
                                </div>
                                <div class="col-md-4">
                                    <div class="row text-center mb-2">
                                        <div class="col-4">
                                            <div class="text-muted small">Weight</div>
                                            <div class="fw-bold">@Model.Element?.Weight%</div>
                                        </div>
                                        <div class="col-4">
                                            <div class="text-muted small">Performance</div>
                                            <div class="fw-bold">@Model.Element?.Performance.ToString("F1")%</div>
                                        </div>
                                        <div class="col-4">
                                            <div class="text-muted small">Indicators</div>
                                            <div class="fw-bold">@Model.Indicators.Count</div>
                                        </div>
                                    </div>
                                    <div class="row text-center">
                                        <div class="col-6">
                                            <div class="text-muted small">Financial</div>
                                            <div class="fw-bold text-primary">@Model.Element?.FinancialPerformance.ToString("F1")%</div>
                                        </div>
                                        <div class="col-6">
                                            <div class="text-muted small">Physical</div>
                                            <div class="fw-bold text-success">@Model.Element?.PhysicalPerformance.ToString("F1")%</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Indicators List -->
            @if (Model.Indicators.Any())
            {
                <div class="row">
                    @foreach (var indicator in Model.Indicators)
                    {
                        <div class="col-lg-6 mb-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0">
                                            <i class="bi bi-speedometer2 me-2 text-warning"></i>@indicator.Name
                                        </h6>
                                        @if (User.IsInRole("SuperAdministrator") || User.IsInRole("Supervisor"))
                                        {
                                            <div class="dropdown">
                                                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                    <i class="bi bi-three-dots"></i>
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="@Url.Page("./Edit", new { id = indicator.Id })">
                                                        <i class="bi bi-pencil me-2"></i>Edit
                                                    </a></li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li><a class="dropdown-item text-danger" href="#" data-bs-toggle="modal" data-bs-target="#deleteModal-@indicator.Id">
                                                        <i class="bi bi-trash me-2"></i>Delete
                                                    </a></li>
                                                </ul>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="card-body">
                                    @if (!string.IsNullOrEmpty(indicator.Description))
                                    {
                                        <p class="text-muted small mb-3">@indicator.Description</p>
                                    }
                                    
                                    <div class="row mb-3">
                                        <div class="col-6">
                                            <div class="small text-muted">Current Value</div>
                                            <div class="h5 mb-0">
                                                @(indicator.CurrentValue?.ToString("N1") ?? "N/A")
                                                @if (!string.IsNullOrEmpty(indicator.Unit)) { <small class="text-muted">@indicator.Unit</small> }
                                            </div>
                                        </div>
                                        <div class="col-6">
                                            <div class="small text-muted">Target</div>
                                            <div class="h5 mb-0">
                                                @(indicator.Target?.ToString("N1") ?? "N/A")
                                                @if (!string.IsNullOrEmpty(indicator.Unit)) { <small class="text-muted">@indicator.Unit</small> }
                                            </div>
                                        </div>
                                    </div>

                                    @if (indicator.Target.HasValue && indicator.CurrentValue.HasValue)
                                    {
                                        var progress = Math.Min((indicator.CurrentValue.Value / indicator.Target.Value) * 100, 100);
                                        var progressColor = progress >= 90 ? "success" : progress >= 70 ? "warning" : "danger";
                                        
                                        <div class="mb-3">
                                            <div class="d-flex justify-content-between small text-muted mb-1">
                                                <span>Progress</span>
                                                <span>@progress.ToString("F1")%</span>
                                            </div>
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar bg-@progressColor" style="width: @progress%"></div>
                                            </div>
                                        </div>
                                    }
                                    
                                    <!-- Performance Metrics -->
                                    <div class="mb-3">
                                        <div class="row text-center">
                                            <div class="col-3">
                                                <div class="text-muted small">Financial</div>
                                                <div class="fw-bold text-primary">@indicator.FinancialPerformance.ToString("F1")%</div>
                                            </div>
                                            <div class="col-3">
                                                <div class="text-muted small">Physical</div>
                                                <div class="fw-bold text-success">@indicator.PhysicalPerformance.ToString("F1")%</div>
                                            </div>
                                            <div class="col-3">
                                                <div class="text-muted small">Overall</div>
                                                <div class="fw-bold text-info">@indicator.Performance.ToString("F1")%</div>
                                            </div>
                                            <div class="col-3">
                                                <div class="text-muted small">Trend</div>
                                                <div class="fw-bold @(indicator.Trend >= 0 ? "text-success" : "text-danger")">
                                                    @(indicator.Trend >= 0 ? "+" : "")@indicator.Trend.ToString("F1")%
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-between align-items-center small text-muted">
                                        <span><i class="bi bi-calendar3 me-1"></i>@indicator.CreatedAt.ToString("MMM yyyy")</span>
                                        <span><i class="bi bi-graph-up me-1"></i>@indicator.MeasurementsCount measurements</span>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="d-flex gap-2">
                                        <button class="btn btn-sm btn-outline-info flex-fill">
                                            <i class="bi bi-graph-up me-1"></i>View Data
                                        </button>
                                        <button class="btn btn-sm btn-outline-success">
                                            <i class="bi bi-plus me-1"></i>Add Measurement
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- No Indicators State -->
                <div class="card bg-light border-0">
                    <div class="card-body text-center py-5">
                        <i class="bi bi-speedometer2 text-muted" style="font-size: 4rem;"></i>
                        <h4 class="text-muted mt-3">No Indicators Yet</h4>
                        <p class="text-muted">This @Model.Element?.Type.ToLower() doesn't have any indicators for performance measurement.</p>
                        @if (User.IsInRole("SuperAdministrator") || User.IsInRole("Supervisor"))
                        {
                            <a href="@Url.Page("./Create", new { elementId = Model.ElementId })" class="btn btn-warning">
                                <i class="bi bi-plus-circle me-1"></i>Create First Indicator
                            </a>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modals -->
@foreach (var indicator in Model.Indicators)
{
    <div class="modal fade" id="deleteModal-@indicator.Id" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header border-danger">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>Delete Indicator
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">
                        Are you sure you want to delete indicator <strong>"@indicator.Name"</strong>?
                    </p>
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This action will also delete:
                        <ul class="mb-0 mt-2">
                            <li>@indicator.MeasurementsCount measurement record(s)</li>
                            <li>All associated historical data</li>
                        </ul>
                    </div>
                </div>
                <div class="modal-footer">
                    <form method="post" asp-page-handler="Delete">
                        <input type="hidden" name="id" value="@indicator.Id" />
                        <input type="hidden" asp-for="ElementId" />
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash me-1"></i>Yes, Delete Indicator
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    string GetDefaultIcon(string? elementType) => elementType switch
    {
        "Outcome" => "target",
        "Output" => "box-arrow-up",
        "SubOutput" => "arrow-up-right",
        _ => "circle"
    };

    string GetElementColorClass(string? elementType) => elementType switch
    {
        "Outcome" => "primary",
        "Output" => "success", 
        "SubOutput" => "info",
        _ => "secondary"
    };
}