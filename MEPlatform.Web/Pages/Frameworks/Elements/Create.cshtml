@page "{frameworkId:int}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SuperAdministrator,Supervisor")]
@model MEPlatform.Web.Pages.Frameworks.Elements.CreateModel
@{
    ViewData["Title"] = $"Create {Model.ElementType}";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-2">
                            <li class="breadcrumb-item"><a href="@Url.Page("/Dashboard/Index")">Dashboard</a></li>
                            <li class="breadcrumb-item"><a href="@Url.Page("../Index")">Frameworks</a></li>
                            <li class="breadcrumb-item"><a href="@Url.Page("./Index", new { frameworkId = Model.FrameworkId })">@Model.Framework.Name</a></li>
                            <li class="breadcrumb-item active">Create @Model.ElementType</li>
                        </ol>
                    </nav>
                    <h1 class="h3 mb-0">
                        <i class="bi bi-@(GetElementIcon(Model.ElementType)) me-2"></i>Create New @Model.ElementType
                    </h1>
                </div>
                <a href="@Url.Page("./Index", new { frameworkId = Model.FrameworkId })" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to Framework
                </a>
            </div>

            <!-- Main Form -->
            <div class="row">
                <div class="col-lg-8">
                    <div class="card shadow-sm">
                        <div class="card-header bg-@(GetElementColorClass(Model.ElementType)) text-white">
                            <h5 class="mb-0">
                                <i class="bi bi-@(GetElementIcon(Model.ElementType)) me-2"></i>@Model.ElementType Information
                            </h5>
                        </div>
                        <div class="card-body">
                            <form method="post">
                                <input type="hidden" asp-for="FrameworkId" />
                                <input type="hidden" asp-for="ElementType" />
                                <input type="hidden" asp-for="ParentId" />

                                <!-- Name -->
                                <div class="mb-4">
                                    <label asp-for="Element.Name" class="form-label fw-bold">
                                        @Model.ElementType Name <span class="text-danger">*</span>
                                    </label>
                                    <input asp-for="Element.Name" class="form-control" placeholder="@($"Enter {Model.ElementType.ToLower()} name")" />
                                    <span asp-validation-for="Element.Name" class="text-danger"></span>
                                    <div class="form-text">A clear, descriptive name for this @Model.ElementType.ToLower()</div>
                                </div>

                                <!-- Description -->
                                <div class="mb-4">
                                    <label asp-for="Element.Description" class="form-label fw-bold">
                                        Description
                                    </label>
                                    <textarea asp-for="Element.Description" class="form-control" rows="4" 
                                              placeholder="@($"Describe the purpose and scope of this {Model.ElementType.ToLower()}")"></textarea>
                                    <span asp-validation-for="Element.Description" class="text-danger"></span>
                                    <div class="form-text">Explain what this @Model.ElementType.ToLower() aims to achieve</div>
                                </div>

                                <!-- Parent Selection (for Output and Sub-output) -->
                                @if (Model.ElementType == "Output" || Model.ElementType == "SubOutput")
                                {
                                    <div class="mb-4">
                                        <label asp-for="ParentId" class="form-label fw-bold">
                                            Parent @(Model.ElementType == "Output" ? "Outcome" : "Output") <span class="text-danger">*</span>
                                        </label>
                                        <select asp-for="ParentId" class="form-select">
                                            <option value="">Select parent @(Model.ElementType == "Output" ? "outcome" : "output")...</option>
                                            @foreach (var parent in Model.AvailableParents)
                                            {
                                                <option value="@parent.Id">@parent.Name</option>
                                            }
                                        </select>
                                        <span asp-validation-for="ParentId" class="text-danger"></span>
                                        <div class="form-text">Choose which @(Model.ElementType == "Output" ? "outcome" : "output") this belongs to</div>
                                    </div>
                                }

                                <!-- Weight -->
                                <div class="mb-4">
                                    <label asp-for="Element.Weight" class="form-label fw-bold">
                                        Weight
                                    </label>
                                    <div class="input-group">
                                        <input asp-for="Element.Weight" type="number" step="0.1" min="0" max="100" 
                                               class="form-control" placeholder="0.0" />
                                        <span class="input-group-text">%</span>
                                    </div>
                                    <span asp-validation-for="Element.Weight" class="text-danger"></span>
                                    <div class="form-text">Relative importance within its parent (0-100%)</div>
                                </div>

                                <!-- Icon -->
                                <div class="mb-4">
                                    <label asp-for="Element.Icon" class="form-label fw-bold">
                                        Icon
                                    </label>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <input asp-for="Element.Icon" class="form-control" 
                                                   placeholder="Bootstrap icon name" />
                                            <span asp-validation-for="Element.Icon" class="text-danger"></span>
                                            <div class="form-text">Bootstrap icon name without 'bi-' prefix</div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="card bg-light h-100 d-flex align-items-center justify-content-center">
                                                <div class="text-center">
                                                    <i id="icon-preview" class="bi bi-@(GetElementIcon(Model.ElementType))" style="font-size: 2rem;"></i>
                                                    <div class="small text-muted mt-2">Icon Preview</div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Actions -->
                                <div class="d-flex gap-2 pt-3">
                                    <button type="submit" class="btn btn-@(GetElementColorClass(Model.ElementType))">
                                        <i class="bi bi-check-circle me-1"></i>Create @Model.ElementType
                                    </button>
                                    <a href="@Url.Page("./Index", new { frameworkId = Model.FrameworkId })" class="btn btn-outline-secondary">
                                        <i class="bi bi-x-circle me-1"></i>Cancel
                                    </a>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Help Panel -->
                <div class="col-lg-4">
                    <div class="card border-0 bg-light">
                        <div class="card-body">
                            <h6 class="card-title">
                                <i class="bi bi-info-circle me-2"></i>Creating a @Model.ElementType
                            </h6>
                            
                            <div class="mb-3">
                                <h6 class="small fw-bold mb-2">@Model.ElementType Definition:</h6>
                                <p class="small text-muted">
                                    @(GetElementDefinition(Model.ElementType))
                                </p>
                            </div>

                            @if (Model.ElementType == "Outcome")
                            {
                                <div class="mb-3">
                                    <h6 class="small fw-bold mb-2">Outcome Tips:</h6>
                                    <ul class="list-unstyled small">
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Focus on long-term changes</li>
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Should be measurable</li>
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Connect to framework goals</li>
                                    </ul>
                                </div>
                            }
                            else if (Model.ElementType == "Output")
                            {
                                <div class="mb-3">
                                    <h6 class="small fw-bold mb-2">Output Tips:</h6>
                                    <ul class="list-unstyled small">
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Direct products of activities</li>
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Should contribute to outcomes</li>
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Specific and concrete</li>
                                    </ul>
                                </div>
                            }
                            else if (Model.ElementType == "SubOutput")
                            {
                                <div class="mb-3">
                                    <h6 class="small fw-bold mb-2">Sub-output Tips:</h6>
                                    <ul class="list-unstyled small">
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Components of outputs</li>
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>More detailed and specific</li>
                                        <li class="mb-1"><i class="bi bi-check text-success me-2"></i>Directly measurable</li>
                                    </ul>
                                </div>
                            }

                            <div>
                                <h6 class="small fw-bold mb-2">Next Steps:</h6>
                                <p class="small text-muted">
                                    After creating this @Model.ElementType.ToLower(), you can add 
                                    @(Model.ElementType == "Outcome" ? "outputs and" : Model.ElementType == "Output" ? "sub-outputs and" : "") 
                                    indicators to measure its performance.
                                </p>
                            </div>
                        </div>
                    </div>

                    <!-- Framework Context -->
                    <div class="card border-primary mt-3">
                        <div class="card-header bg-primary text-white">
                            <h6 class="mb-0">Framework Context</h6>
                        </div>
                        <div class="card-body">
                            <div class="mb-2">
                                <strong>Framework:</strong> @Model.Framework.Name
                            </div>
                            <div class="mb-2">
                                <strong>Type:</strong> <span class="badge bg-info">@Model.Framework.Type</span>
                            </div>
                            @if (Model.Parent != null)
                            {
                                <div class="mb-2">
                                    <strong>Parent:</strong> @Model.Parent.Name
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    
    <script>
        // Icon preview functionality
        document.addEventListener('DOMContentLoaded', function() {
            const iconInput = document.getElementById('Element_Icon');
            const iconPreview = document.getElementById('icon-preview');
            const defaultIcon = '@GetElementIcon(Model.ElementType)';
            
            function updateIconPreview() {
                const iconName = iconInput.value.trim();
                if (iconName) {
                    iconPreview.className = `bi bi-${iconName}`;
                } else {
                    iconPreview.className = `bi bi-${defaultIcon}`;
                }
            }
            
            iconInput.addEventListener('input', updateIconPreview);
            updateIconPreview(); // Initialize
        });
    </script>
}

@functions {
    string GetElementIcon(string elementType) => elementType switch
    {
        "Outcome" => "target",
        "Output" => "box-arrow-up",
        "SubOutput" => "arrow-up-right",
        _ => "circle"
    };

    string GetElementColorClass(string elementType) => elementType switch
    {
        "Outcome" => "primary",
        "Output" => "success",
        "SubOutput" => "info",
        _ => "secondary"
    };

    string GetElementDefinition(string elementType) => elementType switch
    {
        "Outcome" => "The medium to long-term results that the framework aims to achieve. Outcomes represent the changes in conditions, behaviors, or performance that result from outputs.",
        "Output" => "The direct and immediate results of activities. Outputs are the tangible products, services, or changes that are produced by the implementation of interventions.",
        "SubOutput" => "Specific components or sub-categories of outputs that provide more detailed breakdown of what needs to be achieved within an output.",
        _ => "Framework element definition not available."
    };
}